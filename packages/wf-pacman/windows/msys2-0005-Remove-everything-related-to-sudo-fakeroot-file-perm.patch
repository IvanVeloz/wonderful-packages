diff --git a/scripts/libmakepkg/executable/meson.build b/scripts/libmakepkg/executable/meson.build
index 5be72276..f6474ebf 100644
--- a/scripts/libmakepkg/executable/meson.build
+++ b/scripts/libmakepkg/executable/meson.build
@@ -4,13 +4,11 @@ sources = [
   'ccache.sh.in',
   'checksum.sh.in',
   'distcc.sh.in',
-  'fakeroot.sh.in',
   'debugedit.sh.in',
   'gpg.sh.in',
   'gzip.sh.in',
   'pacman.sh.in',
   'strip.sh.in',
-  'sudo.sh.in',
   'vcs.sh.in',
 ]
 
diff --git a/scripts/makepkg.sh.in b/scripts/makepkg.sh.in
index 75df3650..a1c4281d 100644
--- a/scripts/makepkg.sh.in
+++ b/scripts/makepkg.sh.in
@@ -26,7 +26,7 @@
 
 # makepkg uses quite a few external programs during its execution. You
 # need to have at least the following installed for makepkg to function:
-#   awk, bsdtar (libarchive), bzip2, coreutils, fakeroot, file, find (findutils),
+#   awk, bsdtar (libarchive), bzip2, coreutils, file, find (findutils),
 #   gettext, gpg, grep, gzip, sed, tput (ncurses), xz
 
 # gettext initialization
@@ -59,7 +59,6 @@ FORCE=0
 GENINTEG=0
 HOLDVER=0
 IGNOREARCH=0
-INFAKEROOT=0
 INSTALL=0
 LOGGING=0
 NEEDED=0
@@ -107,10 +106,9 @@ done
 trap_exit() {
 	local signal=$1; shift
 
-	if (( ! INFAKEROOT )); then
-		echo
-		error "$@"
-	fi
+	echo
+	error "$@"
+
 	[[ -n $srclinks ]] && rm -rf "$srclinks"
 
 	# unset the trap for this signal, and then call the default handler
@@ -125,11 +123,6 @@ trap_exit() {
 clean_up() {
 	local EXIT_CODE=$?
 
-	if (( INFAKEROOT )); then
-		# Don't clean up when leaving fakeroot, we're not done yet.
-		return 0
-	fi
-
 	if [[ -p $logpipe ]]; then
 		rm "$logpipe"
 	fi
@@ -184,11 +177,6 @@ clean_up() {
 	fi
 }
 
-enter_fakeroot() {
-	msg "$(gettext "Entering %s environment...")" "fakeroot"
-	fakeroot -- bash -$- "${BASH_SOURCE[0]}" -F "${ARGLIST[@]}" || exit $?
-}
-
 # Automatically update pkgver variable if a pkgver() function is provided
 # Re-sources the PKGBUILD afterwards to allow for other variables that use $pkgver
 update_pkgver() {
@@ -242,10 +230,6 @@ run_pacman() {
 			else
 				cmd=("${PACMAN_AUTH[@]}" "${cmd[@]}")
 			fi
-		elif type -p sudo >/dev/null; then
-			cmd=(sudo -k "${cmd[@]}")
-		else
-			cmd=(su root -c "$cmdescape")
 		fi
 		local lockfile="$(pacman-conf DBPath)/db.lck"
 		while [[ -f $lockfile ]]; do
@@ -493,7 +477,6 @@ write_pkginfo() {
 	generate_autodeps
 
 	printf "# Generated by makepkg %s\n" "$makepkg_version"
-	printf "# using %s\n" "$(fakeroot -v)"
 
 	write_kv_pair "pkgname" "$pkgname"
 	write_kv_pair "pkgbase" "$pkgbase"
@@ -945,12 +928,16 @@ if ! type -p gettext >/dev/null; then
 	gettext() {
 		printf "%s\n" "$@"
 	}
+else
+	gettext() {
+		/usr/bin/gettext "$@"
+	}
 fi
 
 ARGLIST=("$@")
 
 # Parse Command Line Options.
-OPT_SHORT="AcCdD:efFghiLmop:rRsSV"
+OPT_SHORT="AcCdD:efghiLmop:rRsSV"
 OPT_LONG=('allsource' 'check' 'clean' 'cleanbuild' 'config:' 'dir:' 'force' 'geninteg'
           'help' 'holdver' 'ignorearch' 'install' 'key:' 'log' 'noarchive' 'nobuild'
           'nocolor' 'nocheck' 'nodeps' 'noextract' 'noprepare' 'nosign' 'packagelist'
@@ -985,7 +972,6 @@ while true; do
 		-D|--dir)         shift; CHDIR=$1 ;;
 		-e|--noextract)   NOEXTRACT=1 ;;
 		-f|--force)       FORCE=1 ;;
-		-F)               INFAKEROOT=1 ;;
 		# generating integrity checks does not depend on architecture
 		-g|--geninteg)    BUILDPKG=0 GENINTEG=1 IGNOREARCH=1;;
 		--holdver)        HOLDVER=1 ;;
@@ -1030,7 +1016,7 @@ while [[ $1 ]]; do
 	shift
 done
 
-if (( ! INFAKEROOT )) &&  [[ -n $CHDIR ]]; then
+if [[ -n $CHDIR ]]; then
 	cd_safe "$CHDIR"
 fi
 
@@ -1107,19 +1093,6 @@ if (( LOGGING )) && ! ensure_writable_dir "LOGDEST" "$LOGDEST"; then
 	exit $E_FS_PERMISSIONS
 fi
 
-if (( ! INFAKEROOT )); then
-	if (( EUID == 0 )); then
-		error "$(gettext "Running %s as root is not allowed as it can cause permanent,\n\
-catastrophic damage to your system.")" "makepkg"
-		exit $E_ROOT
-	fi
-else
-	if [[ -z $FAKEROOTKEY ]]; then
-		error "$(gettext "Do not use the %s option. This option is only for internal use by %s.")" "'-F'" "makepkg"
-		exit $E_INVALID_OPTION
-	fi
-fi
-
 unset pkgname "${pkgbuild_schema_strings[@]}" "${pkgbuild_schema_arrays[@]}"
 unset "${known_hash_algos[@]/%/sums}"
 unset -f pkgver verify prepare build check package "${!package_@}"
@@ -1232,29 +1205,6 @@ if (( ! PKGVERFUNC )); then
 	check_build_status
 fi
 
-# Run the bare minimum in fakeroot
-if (( INFAKEROOT )); then
-	if (( SOURCEONLY )); then
-		create_srcpackage
-		msg "$(gettext "Leaving %s environment.")" "fakeroot"
-		exit $E_OK
-	fi
-
-	prepare_buildenv
-
-	chmod 755 "$pkgdirbase"
-	if (( ! SPLITPKG )); then
-		run_single_packaging
-	else
-		run_split_packaging
-	fi
-
-	create_debug_package
-
-	msg "$(gettext "Leaving %s environment.")" "fakeroot"
-	exit $E_OK
-fi
-
 # check we have the software required to process the PKGBUILD
 check_software || exit $E_MISSING_MAKEPKG_DEPS
 
@@ -1294,7 +1244,7 @@ if (( SOURCEONLY )); then
 	check_source_integrity all
 	cd_safe "$startdir"
 
-	enter_fakeroot
+	create_srcpackage
 
 	if [[ $SIGNPKG = 'y' ]]; then
 		msg "$(gettext "Signing package...")"
@@ -1398,17 +1348,25 @@ else
 		cd_safe "$startdir"
 	fi
 
-	enter_fakeroot
+	# if inhibiting archive creation, go no further
+	if (( NOARCHIVE )); then
+		msg "$(gettext "Package directory is ready.")"
+		exit $E_OK
+	fi
+	mkdir -p "$pkgdirbase"
+	chmod a-srwx "$pkgdirbase"
+	chmod 755 "$pkgdirbase"
+	if (( ! SPLITPKG )); then
+		run_single_packaging
+	else
+		run_split_packaging
+	fi
+
+	create_debug_package
 
 	create_package_signatures || exit $E_PRETTY_BAD_PRIVACY
 fi
 
-# if inhibiting archive creation, go no further
-if (( NOARCHIVE )); then
-	msg "$(gettext "Package directory is ready.")"
-	exit $E_OK
-fi
-
 msg "$(gettext "Finished making: %s")" "$pkgbase $basever ($(date +%c))"
 
 install_package && exit $E_OK || exit $E_INSTALL_FAILED
diff --git a/scripts/pacman-key.sh.in b/scripts/pacman-key.sh.in
index 601163a3..70fc2763 100644
--- a/scripts/pacman-key.sh.in
+++ b/scripts/pacman-key.sh.in
@@ -266,7 +266,7 @@ check_keyring() {
 		exit 1
 	fi
 
-	if (( !(EXPORT || FINGER || LISTKEYS || LISTSIGS || VERIFY) && EUID != 0 )); then
+	if (( !(EXPORT || FINGER || LISTKEYS || LISTSIGS || VERIFY) )); then
 		error "$(gettext "You do not have sufficient permissions to run this command.")"
 		exit 1
 	fi
@@ -691,11 +691,6 @@ if ! type -p gpg >/dev/null; then
 	exit 1
 fi
 
-if (( (ADD || DELETE || EDITKEY || IMPORT || IMPORT_TRUSTDB || INIT || LSIGNKEY || POPULATE || RECEIVE || REFRESH || UPDATEDB) && EUID != 0 )); then
-	error "$(gettext "%s needs to be run as root for this operation.")" "pacman-key"
-	exit 1
-fi
-
 CONFIG=${CONFIG:-@sysconfdir@/pacman.conf}
 if [[ ! -r "${CONFIG}" ]]; then
 	error "$(gettext "%s configuration file '%s' not found.")" "pacman" "$CONFIG"
diff --git a/test/pacman/pmtest.py b/test/pacman/pmtest.py
index f5f033fa..5c2dccf9 100644
--- a/test/pacman/pmtest.py
+++ b/test/pacman/pmtest.py
@@ -240,21 +240,6 @@ def run(self, pacman):
         vprint("\tpacman %s" % self.args)
 
         cmd = []
-        if os.geteuid() != 0:
-            # fakechroot must be called before fakeroot due to potential
-            # potential interactions when wrapping the same C functions
-            fakechroot = util.which("fakechroot")
-            if not fakechroot:
-                tap.diag("WARNING: fakechroot not found!")
-            else:
-                cmd.append("fakechroot")
-
-            fakeroot = util.which("fakeroot")
-            if not fakeroot:
-                tap.diag("WARNING: fakeroot not found!")
-            else:
-                cmd.append("fakeroot")
-
         if pacman["gdb"]:
             cmd.extend(["libtool", "execute", "gdb", "--args"])
         if pacman["valgrind"]:
